image: docker:stable

services:
- docker:dind

stages: # List of stages for jobs, and their order of execution
  - test
  # - deploy

test-job:
  stage: test
  image: docker/compose
  script:
    - docker-compose version
    - docker-compose up -d
    - docker-compose exec fastapiapp pytest -s
  after_script:
    - docker-compose down

# build-job: # This job runs in the build stage, which runs first.
#   stage: build
#   before_script:
#     - docker-compose up -d
#   script:
#     - echo "Containers built."
#     - docker-compose exec fastapiapp pytest -s
#     - docker-compose exec fastapiapp pylint
#   after_script:
#     - docker-compose down


stages: # List of stages for jobs, and their order of execution
  - build
  #- test
  # - deploy

build-job: # This job runs in the build stage, which runs first.
  stage: build
  before-script:
  script:
    - docker-compose up -d
    - echo "Containers built."
    - docker-compose exec fastapiapp pytest -s
    - docker-compose exec fastapiapp pylint
# unit-test-job: # This job runs in the test stage.
#   stage: test # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests..."
#     - docker-compose run fastapiapp pytest -s

# lint-test-job: # This job also runs in the test stage.
#   stage: test # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code..."
#     - docker-compose run fastapiapp pylint
# deploy-job: # This job runs in the deploy stage.
#   stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
