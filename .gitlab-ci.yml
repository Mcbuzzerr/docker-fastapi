image: docker:stable

services:
  - docker:dind

stages: # List of stages for jobs, and their order of execution
  - lint
  #- build
  - test
  # - deploy

lint-job: # This job runs in the lint stage, which runs first.
  stage: lint
  before_script:
    - echo "Pre-Linting code..."
    - echo "$(docker network list)"
    - docker exec gitlab mkdir -p public/badges public/lint
    - docker exec gitlab echo undefined > public/badges/$CI_JOB_NAME.score
    - docker exec docker-fastapi pip install pylint-gitlab
  script:
    - echo "Linting code..."
    - docker exec docker-fastapi pylint --exit-zero --output-format=text $(find -type f -name "*.py" ! -path "**/.venv/**") | tee /tmp/pylint.txt
    - docker exec docker-fastapi sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' /tmp/pylint.txt > public/badges/$CI_JOB_NAME.score
    - docker exec docker-fastapi pylint --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > codeclimate.json
    - docker exec docker-fastapi pylint --exit-zero --output-format=pylint_gitlab.GitlabPagesHtmlReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > public/lint/index.html
  after_script:
    - docker exec gitlab anybadge --overwrite --label $CI_JOB_NAME --value=$(cat public/badges/$CI_JOB_NAME.score) --file=public/badges/$CI_JOB_NAME.svg 4=red 6=orange 8=yellow 10=green
  artifacts:
    paths:
      - public
    reports:
      codequality: codeclimate.json
    when: always

# build-job:
#   stage: build
#   image: docker/compose
#   script:
#     - docker-compose version
#     #- docker-compose up -d
#     #- docker-compose build
#     #- docker push dbuckleysm/docker-fastapi

test-job:
  stage: test
  image: docker/compose
  script:
    - docker-compose version
    - docker-compose -f docker-compose.prod.yml up -d
    - docker-compose exec -T fastapiapp pytest
  after_script:
    - docker-compose down
# build-job: # This job runs in the build stage, which runs first.
#   stage: build
#   before_script:
#     - docker-compose up -d
#   script:
#     - echo "Containers built."
#     - docker-compose exec fastapiapp pytest -s
#     - docker-compose exec fastapiapp pylint
#   after_script:
#     - docker-compose down

# unit-test-job: # This job runs in the test stage.
#   stage: test # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests..."
#     - docker-compose run fastapiapp pytest -s

# lint-test-job: # This job also runs in the test stage.
#   stage: test # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code..."
#     - docker-compose run fastapiapp pylint
# deploy-job: # This job runs in the deploy stage.
#   stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
